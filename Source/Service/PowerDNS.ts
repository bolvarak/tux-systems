///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict'; /// Strict Syntax //////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import Configuration from '../Common/Configuration'; /// Configuration Settings //////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import Utility from '../Common/Utility'; /// Utility Module /////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import PowerDNS from '../Library/PowerDNS'; /// PowerDNS Library Module //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import Socket from '../Common/Service/Socket'; /// Socket Module /////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import PowerDnsResult from '../Model/PowerDNS/Result'; /// PowerDNS Result Model /////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import DnsQuery from '../Model/Fluent/Dns/10-Query'; /// DNS Query Model /////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import * as net from 'net'; /// Network Modules //////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export default class ServicePowerDNS extends Socket { /// ServicePowerDNS Class Definition ///////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Constructor //////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method instantiates a new PowerDNS Socket Service
	 * @name ServicePowerDNS.constructor()
	 */
	public constructor() {

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		super(Configuration.pdns.socket, Configuration.pdns.log.id, Configuration.pdns.log.level); /// Super Constructor
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	} /// End Constructor ////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Implementations //////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method responds to an incoming connection
	 * @abstract
	 * @async
	 * @name ServicePowerDNS.clientConnect()
	 * @param {net.Socket} $stream
	 * @protected
	 * @returns {Promise<void>}
	 */
	protected async clientConnect($stream: net.Socket): Promise<void> {

	}

	/**
	 * This method handles a client disconnecting
	 * @abstract
	 * @async
	 * @name ServicePowerDNS.clientDisconnect()
	 * @param {string} $clientId
	 * @param {net.Socket} $stream
	 * @protected
	 * @returns {Promise<void>}
	 */
	protected async clientDisconnect($clientId: string, $stream: net.Socket): Promise<void> {

	}

	/**
	 * This method forces a client to disconnect
	 * @abstract
	 * @async
	 * @name ServicePowerDNS.clientForceDisconnect()
	 * @param {string} $clientId
	 * @param {Socket} $stream
	 * @protected
	 * @returns {Promise<void>}
	 */
	protected async clientForceDisconnect($clientId: string, $stream: net.Socket): Promise<void> {

	}

	/**
	 * This method handles the client request
	 * @abstract
	 * @async
	 * @name ServicePowerDNS.clientRequest()
	 * @param {string} $clientId
	 * @param {net.Socket} $stream
	 * @param {Buffer} $data
	 * @protected
	 * @returns {Promise<void>}
	 * @uses CommonService.logger()
	 */
	protected async clientRequest($clientId: string, $stream: net.Socket, $data: Buffer): Promise<void> {
		// Try to process the request
		try {
			// Parse the payload
			const $payload:
				{method: string, parameters: (
					{zonename: string, domain_id?: number}
					| {qtype: string, qname: string, remote: string, local: string, 'real-remote': string, 'zone-id': number}
				)} = JSON.parse($data.toString());
			// Instantiate our model
			const $queryModel: DnsQuery = await DnsQuery.create({
				clientId: $clientId,
				method: $payload.method,
				request: $payload
			});
			// Instantiate the library
			const $libPowerDNS: PowerDNS = new PowerDNS($queryModel, this.logger());
			// Await the response
			await $libPowerDNS.response();
			// Write the result to the socket
			$stream.write($libPowerDNS.result().toJson() + '\n');
		} catch ($error) {
			// Log the error
			this.logger().error($error.message);
			// Instantiate our result model
			const $powerDnsResult: PowerDnsResult = new PowerDnsResult();
			// Set the result to failure
			$powerDnsResult.unsuccessful();
			// Add the error message
			$powerDnsResult.log($error.message);
			// Add the forced disconnect message
			$powerDnsResult.log('Forced Disconnect');
			// Send the response
			$stream.write($powerDnsResult.toJson() + '\n');
			// Close the connection
			$stream.end();
		}
	}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} /// End ServicePowerDNS Class Definition ///////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
