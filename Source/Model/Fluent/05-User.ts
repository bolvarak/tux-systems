///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict'; /// Strict Syntax //////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Sequelize Dependencies ///////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import {
	AfterCreate,
	AfterFind,
	AfterUpdate,
	BeforeCreate,
	BeforeUpdate,
	BelongsTo,
	Column,
	DataType,
	ForeignKey,
	IsEmail,
	HasMany,
	Length,
	Model,
	Table
} from 'sequelize-typescript';

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import Account from './00-Account'; /// Account Model ////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import SocialMediaProfile from './15-SocialMediaProfile'; /// SocialMediaProfile Model ///////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import DnsDomain from './Dns/00-Domain'; /// DNS Domain Model ////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import DnsRecord from './Dns/05-Record'; /// DNS Record Model ////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import DnsQuery from './Dns/10-Query'; /// DNS Query Model ///////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import $crypto from '../../Library/Cryptography'; /// Cryptographic Library //////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// User Table Model Definition //////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@Table({
	indexes: [
		{fields: ['account_id']},
		{fields: ['email_address']},
		{fields: ['is_active']},
		{fields: ['is_admin']},
		{fields: ['is_primary']},
		{fields: ['username'], unique: true}
	],
	tableName: 'user'
})
export default class User extends Model<User> {

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Hooks ////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@AfterCreate
	@AfterFind
	@AfterUpdate
	public static decryptPassword($instance: User): void {
		// Check for a hash
		if ($crypto.isHash($instance.password)) {
			// Decrypt the password
			$instance.password = $crypto.staticKeyDecrypt($instance.password);
		}
	}

	@BeforeCreate
	@BeforeUpdate
	public static encryptPassword($instance: User): void {
		// Check for a hash
		if (!$crypto.isHash($instance.password)) {
			// Encrypt the password
			$instance.password = $crypto.staticKeyEncrypt($instance.password);
		}
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Columns //////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@ForeignKey(() => Account)
	@Column({
		allowNull: false,
		field: 'account_id',
		type: DataType.UUID
	})
	public accountId!: string;

	@IsEmail
	@Column({
		allowNull: false,
		field: 'email_address',
		type: DataType.STRING,
	})
	public emailAddress!: string;

	@Length({
		max: 150
	})
	@Column({
		allowNull: false,
		field: 'first_name',
		type: DataType.STRING(150)
	})
	public firstName!: string;

	@Column({
		allowNull: false,
		defaultValue: DataType.UUIDV4,
		field: 'id',
		primaryKey: true,
		type: DataType.UUID
	})
	public id!: string;

	@Column({
		allowNull: false,
		defaultValue: true,
		field: 'is_active',
		type: DataType.BOOLEAN
	})
	public isActive!: boolean;

	@Column({
		allowNull: true,
		defaultValue: false,
		field: 'is_admin',
		type: DataType.BOOLEAN
	})
	public isAdmin!: boolean;

	@Column({
		allowNull: false,
		defaultValue: false,
		field: 'is_primary',
		type: DataType.BOOLEAN
	})
	public isPrimary!: boolean;

	@Length({
		max: 150
	})
	@Column({
		allowNull: false,
		field: 'last_name',
		type: DataType.STRING(150)
	})
	public lastName!: string;

	@Column({
		allowNull: true,
		field: 'password',
		type: DataType.TEXT
	})
	public password!: string;

	@Length({
		max: 125
	})
	@Column({
		allowNull: false,
		field: 'username',
		type: DataType.STRING(125)
	})
	public username!: string;

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Associations /////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@BelongsTo(() => Account)
	public account!: Account;

	@HasMany(() => SocialMediaProfile)
	public socialMediaProfileList!: SocialMediaProfile[];

	@HasMany(() => DnsDomain)
	public domainList!: DnsDomain[];

	@HasMany(() => DnsRecord)
	public domainRecordList!: DnsRecord[];

	@HasMany(() => DnsQuery)
	public queryList!: DnsQuery[];
}
