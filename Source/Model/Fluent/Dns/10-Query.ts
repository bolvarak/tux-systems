///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict'; /// Strict Syntax //////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Sequelize Dependencies ///////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import {
	BeforeCreate,
	BeforeUpdate,
	BelongsTo,
	Column,
	DataType,
	ForeignKey,
	HasMany,
	Model,
	Table
} from 'sequelize-typescript';

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import User from '../05-User'; /// User Model ////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import DnsDomain from './00-Domain'; /// DNS Domain Model ////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import DnsRecord from './05-Record'; /// DNS Record Model ////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import PowerDnsRecord from '../../PowerDNS/Record'; /// PowerDNS Record Model ////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// DNS Query Table Model Definition /////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@Table({
	indexes: [
		{fields: ['client_id']},
		{fields: ['dns_domain_id']},
		{fields: ['method']},
		{fields: ['dns_record_id']},
		{fields: ['request'], operator: 'jsonb_path_ops', using: 'gin'},
		{fields: ['user_id']}
	],
	tableName: 'dns_query'
})
export default class DnsQuery extends Model<DnsQuery> {

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Hooks ////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@BeforeCreate
	@BeforeUpdate
	public static normalizeMethod($instance: DnsQuery): void {
		// Reset the method
		$instance.method = $instance.method.toLowerCase().trim();
	}

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Columns //////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@Column({
		allowNull: false,
		field: 'client_id',
		type: DataType.UUID
	})
	public clientId!: string;

	@ForeignKey(() => DnsDomain)
	@Column({
		allowNull: true,
		field: 'dns_domain_id',
		type: DataType.UUID
	})
	public domainId!: string;

	@Column({
		allowNull: false,
		defaultValue: DataType.UUIDV4,
		field: 'id',
		primaryKey: true,
		type: DataType.UUID
	})
	public id!: string;

	@Column({
		allowNull: false,
		field: 'method',
		type: DataType.ENUM(
			'aborttransaction',
			'activatedomainkey',
			'adddomainkey',
			'calculatesoaserial',
			'committransaction',
			'createslavedomain',
			'deactivatedomainkey',
			'directbackendcmd',
			'feedents',
			'feedents3',
			'feedrecord',
			'getalldomainmetadata',
			'getalldomains',
			'getbeforeandafternamesabsolute',
			'getdomaininfo',
			'getdomainkeys',
			'getdomainmetadata',
			'gettsigkey',
			'initialize',
			'ismaster',
			'list',
			'lookup',
			'removedomainkey',
			'replacerrset',
			'searchrecords',
			'setdomainmetadata',
			'setnotified',
			'starttransaction',
			'supermasterbackend'
		)
	})
	public method!: string;

	@Column({
		allowNull: true,
		field: 'dns_record_id',
		type: DataType.ARRAY(DataType.UUID)
	})
	public recordId: string[] = [];

	@Column({
		allowNull: false,
		field: 'request',
		type: DataType.JSONB
	})
	public request!: {method: string, parameters: ({zonename: string, domain_id?: number}
		| {qtype: string, qname: string, remote: string, local: string, 'real-remote': string, 'zone-id': number})};

	@Column({
		allowNull: true,
		field: 'response',
		type: DataType.JSONB
	})
	public response!: {result: boolean | PowerDnsRecord[], log: string[]};

	@ForeignKey(() => User)
	@Column({
		allowNull: true,
		field: 'user_id',
		type: DataType.UUID
	})
	public userId!: string;

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Associations /////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	@BelongsTo(() => User)
	public user!: User;

	@BelongsTo(() => DnsDomain)
	public domain!: DnsDomain;

}
