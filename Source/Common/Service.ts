///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
'use strict'; /// Strict Syntax //////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
import Loggable from './Loggable'; /// Logging Module ////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
export default abstract class CommonService extends Loggable { /// CommonService Class Definition ////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Constructor //////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method instantiates a new abstract service
	 * @name CommonService.constructor()
	 * @param {string} $sysLogId
	 * @param {string, optional} $logLevel ['debug']
	 * @protected
	 */
	protected constructor($sysLogId: string, $logLevel: string = 'debug') {

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////
		super($sysLogId, $logLevel); /// Super Constructor ///////////////////////////////////////////////////////////
		/////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	} /// End Constructor ////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/// Abstract Methods /////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	/**
	 * This method should start the service
	 * @abstract
	 * @async
	 * @name CommonService.start()
	 * @public
	 * @returns {Promise<void>}
	 */
	public abstract async start(): Promise<void>;

	/**
	 * This method should stop the service
	 * @abstract
	 * @async
	 * @name CommonService.stop()
	 * @public
	 * @returns {Promise<void>}
	 */
	public abstract async stop(): Promise<void>;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
} /// End CommonService Class Definition /////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
